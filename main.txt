// main.txt

#include "dust_reading_lib.hpp"
#include "mbed.h"
// using namespace std::chrono;
using namespace dust_reading;
// using namespace sixtron;

namespace {
#define WAIT 1s
}

// ============================================================================
// EXERCICE 1 : Contrôle LED avec interruption sur bouton
// Fichier d'origine : ex1_led_interrupt/main.cpp
// ============================================================================
/*
#include "mbed.h"

InterruptIn bouton(BUTTON1);
DigitalOut led(LED1);

void flip()
{
    led = !led;
}

int main()
{   
    bouton.rise(&flip);
    while(1) {
        printf("bouton = %d\n\r", bouton.read());
        ThisThread::sleep_for(250ms);
    }
}
*/

// ============================================================================
// EXERCICE 2 : Mesure du temps d'appui sur un bouton avec Timer
// Fichier d'origine : ex2_button_timer/main.cpp
// ============================================================================
/*
#include "mbed.h"

Timer t;
InterruptIn bouton2(BUTTON1);
DigitalOut led2(LED1);

void flip_time()
{
    led2 = !led2;
    t.reset();
    t.start();
}

void flop_time()
{
    led2 = !led2;
    t.stop();
}

int main()
{
    bouton2.rise(&flip_time);
    bouton2.fall(&flop_time);
    
    while (1)
    {
        printf("The time taken was %llu milliseconds\n",
               std::chrono::duration_cast<std::chrono::milliseconds>(t.elapsed_time()).count());
        ThisThread::sleep_for(250ms);
    }
}
*/

// ============================================================================
// EXERCICE 3 : Modification de la fréquence de clignotement d'une LED via un bouton
// Fichier d'origine : ex3_led_ticker/main.cpp
// ============================================================================
/*
#include "mbed.h"

// Blinking rate in milliseconds
#define BLINKING_RATE 250ms

Ticker flipper;
InterruptIn bouton3(BUTTON1);
DigitalOut led3(LED1);
float period = 1.0f;

void change_period()
{
    if(period <= 0.1f) {
        period = 1.0f;
    } else {
        period -= 0.1f;
    }
}

void flip_led()
{
    led3 = !led3;
    flipper.detach();
    flipper.attach(&flip_led, period);
}

int main()
{
    led3 = 1;
    flipper.attach(&flip_led, period);
    bouton3.rise(&change_period);

    while (1) {
        ThisThread::sleep_for(BLINKING_RATE);
    }
}
*/

// ============================================================================
// EXERCICE 4 : Ping-Pong avec deux threads et un Mutex (nécessite le RTOS)
// Fichier d'origine : ex4_thread_mutex/main.cpp
// ============================================================================
/*
#include "mbed.h"

DigitalOut led4(LED1);
Thread tPing(osPriorityNormal2, 1024);
Thread tPong(osPriorityNormal, 1024);
Mutex mtx;

void ping(void)
{
    for (int i = 0; i < 100; i++) {
        mtx.lock();
        printf("ping\n");
        mtx.unlock();
    }
}

void pong(void)
{
    for (int i = 0; i < 100; i++) {
        mtx.lock();
        printf("pong\n");
        mtx.unlock();
    }
}

int main(void) 
{
    tPing.start(ping);
    tPong.start(pong);

    while (1) {
        led4 = !led4;
        ThisThread::sleep_for(250ms);
    }
}
*/

// ============================================================================
// PROJET PRINCIPAL : Lecture du DustSensor
// ============================================================================
/*
int main() {
    DustSensor sensor(P1_UART_TX, P1_UART_RX);

    if (!sensor.initialize()) {
        printf("Failed to initialize sensor.\n");
        return -1;
    }

    printf("Sensor initialized and measurement started.\n");

    while (true) {
        led1 = !led1;
        uint16_t pm1_0, pm2_5, pm4_0, pm10;

        if (sensor.read(pm1_0, pm2_5, pm4_0, pm10)) {
            printf("PM1.0: %d ug/m3\nPM4.0: %d ug/m3\n", pm1_0, pm4_0);
            printf("PM10: %d ug/m3\nPM2.5: %d ug/m3\n\n", pm10, pm2_5);
        } else {
            printf("Failed to read data from sensor.\n");
        }

        ThisThread::sleep_for(WAIT);
    }

    return 0;
}
*/

// ============================================================================
// LECTURE DE PARTICULES HPMA115
// ============================================================================
/*
static hpma115_data_t donnee;

int main()
{
    uint8_t coef;
    HPMA115::ErrorType err;
    HPMA115 sensor(P1_UART_TX, P1_UART_RX);

    printf("\n\n------------\nHPMA115\n");

    err = sensor.stop_measurement();
    assert(err == HPMA115::ErrorType::Ok);

    err = sensor.stop_autosend();
    assert(err == HPMA115::ErrorType::Ok);

    err = sensor.set_adjust_coef(200);
    assert(err == HPMA115::ErrorType::Ok);

    err = sensor.read_adjust_coef(&coef);
    assert(err == HPMA115::ErrorType::Ok);
    assert(coef == 200);

    err = sensor.set_adjust_coef(100);
    assert(err == HPMA115::ErrorType::Ok);

    err = sensor.start_measurement();
    assert(err == HPMA115::ErrorType::Ok);

    while (true) {
        led1 = !led1;
        err = sensor.read_measurement(&donnee);
        if (err == HPMA115::ErrorType::Ok) {
            printf("donnee: \n");
            if (donnee.pm1_pm4_valid) {
                printf("PM1.0: %d\nPM4.0: %d\n", donnee.pm1_0, donnee.pm4_0);
            }
            printf("PM10: %d\nPM2.5: %d\n\n", donnee.pm10, donnee.pm2_5);
        }

        ThisThread::sleep_for(WAIT);
    }
}
*/

// ============================================================================
// TEST RÉCEPTION UART (réponse en envoyant rien)
// ============================================================================
/*
bool readResponse(uint8_t* buffer, size_t len) {
    size_t bytesRead = 0;
    while (bytesRead < len) {
        if (uart.readable()) {
            uart.read(buffer + bytesRead, 1);
            bytesRead++;
        }
    }
    return bytesRead == len;
}

int main()
{
    while(true){
        uint8_t response[32];
        size_t len = 32;
        bool received = readResponse(response, len);
        if(received)
            printf("Réponse: %d\n", response[0]);
        else
            printf("Rien\n");
        ThisThread::sleep_for(WAIT);
    }
}
*/

// ============================================================================
// ANCIEN CODE LECTURE DE DUST VIA COMMANDES UART
// ============================================================================
/*
void sendCommand(const uint8_t* cmd, size_t len) {
    uart.write(cmd, len);
}

bool readResponse(uint8_t* buffer, size_t len) {
    size_t bytesRead = 0;
    while (bytesRead < len) {
        if (uart.readable()) {
            uart.read(buffer + bytesRead, 1);
            bytesRead++;
        }
    }
    return bytesRead == len;
}

int main() {
    uint8_t startCmd[] = {0x68, 0x01, 0x01, 0x96};
    uint8_t readCmd[] = {0x68, 0x01, 0x04, 0x93};
    uint8_t response[32];

    sendCommand(startCmd, sizeof(startCmd));
    ThisThread::sleep_for(1000ms);

    while (1)
    {
        sendCommand(readCmd, sizeof(readCmd));

        if (readResponse(response, sizeof(response))) {
            int pm1_0 = response[3] * 256 + response[4];
            int pm2_5 = response[5] * 256 + response[6];
            int pm4_0 = response[7] * 256 + response[8];
            int pm10 = response[9] * 256 + response[10];

            printf("Réponse : %x\n", response);
            printf("PM1.0: %d µg/m3\n", pm1_0);
            printf("PM2.5: %d µg/m3\n", pm2_5);
            printf("PM4.0: %d µg/m3\n", pm4_0);
            printf("PM10: %d µg/m3\n\n", pm10);
        } else {
            printf("Erreur lors de la lecture des données\n");
        }
        ThisThread::sleep_for(3000ms);
    }

    return 0;
}
*/

// ============================================================================
// TP Blink LED (Ancien code)
// ============================================================================
/*
DigitalIn boutonX(BUTTON1);
DigitalOut ledX(LED1);

int main()
{
    while(1) {
        printf("bouton = %d\n\r", boutonX.read());
        ledX = boutonX;
        ThisThread::sleep_for(250ms);
    }
}
*/

// ============================================================================
// FIN DU FICHIER
// ============================================================================

